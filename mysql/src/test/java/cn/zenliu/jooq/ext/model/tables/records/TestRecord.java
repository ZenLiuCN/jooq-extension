/*
 * This file is generated by jOOQ.
 */
package cn.zenliu.jooq.ext.model.tables.records;


import cn.zenliu.jooq.ext.model.tables.Test;

import com.fasterxml.jackson.databind.JsonNode;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRecord extends UpdatableRecordImpl<TestRecord> implements Record2<Integer, JsonNode> {

    private static final long serialVersionUID = 358951483;

    /**
     * Setter for <code>test.test.id</code>.
     */
    public TestRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>test.test.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>test.test.json</code>.
     */
    public TestRecord setJson(JsonNode value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>test.test.json</code>.
     */
    public JsonNode getJson() {
        return (JsonNode) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, JsonNode> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, JsonNode> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Test.TEST_.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<JsonNode> field2() {
        return Test.TEST_.JSON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonNode component2() {
        return getJson();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonNode value2() {
        return getJson();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value2(JsonNode value) {
        setJson(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord values(Integer value1, JsonNode value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST_);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(Integer id, JsonNode json) {
        super(Test.TEST_);

        set(0, id);
        set(1, json);
    }
}
